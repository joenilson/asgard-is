<?php

/*
 * Copyright (C) 2013 Joe Nilson <joenilson@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * @application Asgard Information System :: asgard-is
 * @version 1.0.0 devel
 * @author Joe Nilson <joenilson@gmail.com>
 */
?>
<script>
var DocsLibraryStore<?=$this->threadId; ?> = Ext.create('Asgard.store.DocsLibrary');
    DocsLibraryStore<?= $this->threadId; ?>.load({ params: { module: 'master', type: 0, company: '<?=$this->company;?>', country: '<?=$this->country;?>', location: '<?=$this->location;?>', process: <?=$this->processId;?>, thread: <?=$this->threadId;?>}});

var IEEAStore<?=$this->threadId; ?> = Ext.create('Asgard.store.IEEA_Thread');
IEEAStore<?= $this->threadId; ?>.load({ params: { module: 'master', company: '<?=$this->company;?>', country: '<?=$this->country;?>', location: '<?=$this->location;?>', process: <?=$this->processId;?>, thread: <?=$this->threadId;?>}});

/*
 * Details Information Tab
 * @type type
 */
/*
var detailsTab<?=$this->threadId; ?> = Ext.create('Asgard.lib.Panels.threadDetails', {
    missionValue: '<?=$this->threadData[0]->mission; ?>',
    threadOwnerValue: '<?=$this->owner; ?>',
    scopeValue: '<?=$this->threadData[0]->scope; ?>'
});
*/
var DocumentsGrid<?=$this->threadId; ?> = Ext.create('Asgard.lib.grid.thread_documents', {
    store: DocsLibraryStore<?=$this->threadId;?>
});

var HIRADocsStore<?=$this->threadId; ?> = Ext.create('Asgard.store.HiraDocumentsByThread');
HIRADocsStore<?=$this->threadId; ?>.load({ params: { tid: <?=$this->threadId; ?>, 
                                                company: '<?=$this->company; ?>', 
                                                country: '<?=$this->country; ?>',
                                                location: '<?=$this->location; ?>'
                                            }
                                            });

var IEEAGrid<?=$this->threadId; ?> = Ext.create('Asgard.lib.grid.ieea_thread',{
    flex: 1,
    store: IEEAStore<?=$this->threadId; ?>
});

var HIRAGrid<?=$this->threadId; ?> = Ext.create('Asgard.lib.grid.hira', {
    flex: 1,
    store: HIRADocsStore<?=$this->threadId; ?>
});

function fnChangeInformation(obj, id, component, tool, event, record){
    var item = component.up('panel').items.getAt(0);
    var itemValue = Ext.String.htmlDecode(item.value);
    Ext.suspendLayouts();
    component.up('panel').removeAll();
    var editorField = [{
        width: '99%',
        height: 45,
        margin: '5 5 5 5',
        xtype: 'textareafield',
        value: itemValue
    },{
        bbar: ['->',{
            xtype: 'button',
            text: 'Cancel',
            scope: this,
            handler: function(btn) {
                Ext.Msg.confirm('Alerta', '¿Desea cancelar la edición del texto?', function (button) {
                    if (button === 'yes') {
                        Ext.suspendLayouts();
                        component.up('panel').removeAll();
                        var displayField = [{
                            width: '100%',
                            itemId: item.itemId,
                            xtype: 'displayfield',
                            value: itemValue
                        }];
                        component.up('panel').add(displayField);
                        Ext.resumeLayouts(true);
                    }
                }, this);
            }
        },{
            xtype: 'button',
            text: 'Save',
            scope: this,
            handler: function(btn){
                Ext.Msg.confirm('Alerta', 'Desea grabar los cambios?', function (button) {
                    if (button === 'yes') {
                        var innerItem = btn.up('panel').up('panel').getComponent(0);
                        Ext.Ajax.request({
                            url: 'ims/threadinfoedit',
                            params: {
                                process: <?=$this->processId;?>, 
                                thread: <?=$this->threadId;?>,
                                field: item.itemId,
                                lang: '<?=$this->lang;?>',
                                value: innerItem.value
                            },
                            success: function(response){
                                var status = Ext.decode(response.responseText);
                                if(status.success){
                                    Ext.suspendLayouts();
                                    component.up('panel').removeAll();
                                    var displayField = [{
                                        width: '100%',
                                        xtype: 'displayfield',
                                        itemId: item.itemId,
                                        value: innerItem.value
                                    }];
                                    component.up('panel').add(displayField);
                                    Ext.resumeLayouts(true);
                                }else{
                                    Ext.Msg.alert('Alerta', 'No se grabaron los datos!');
                                }
                            },
                            failure: function(response){
                                if(response.status === 404){
                                    Ext.Msg.alert('Servidor no disponible', 'El servidor no esta disponible en este momento <br> para procesar su solicitud');
                                }else if(response.status === 500){
                                    Ext.Msg.alert('Servidor con problemas', 'El servidor tiene un problema interno <br> por favor contactese con el personal de Sistemas');
                                }
                            }
                        },this);
                    }
                }, this);
            }
        }]
    }];
    component.up('panel').add(editorField);
    Ext.resumeLayouts(true);
}

function fnChangeOwner(obj, id, component, tool, event, record){
    var ProcessOwnerList = Ext.create('Asgard.lib.forms.OwnersCombo',{
        store: new Ext.create('Asgard.store.ProcessOwner'),
        anchor: '50%',
        flex: 1
    });
    var items = [{
        layout: 'hbox',
        flex: 1,
        items: [
            ProcessOwnerList, {
            xtype: 'button',
            text: 'Cancel',
            scope: this,
            handler: function(btn) {
                Ext.Msg.confirm('Alerta', '¿Desea cancelar la edición del texto?', function (button) {
                    if (button === 'yes') {
                        Ext.suspendLayouts();
                        component.up('panel').removeAll();
                        var displayField = [{
                            width: '100%',
                            xtype: 'displayfield',
                            value: '<?=$this->owner; ?>'
                        }];
                        component.up('panel').add(displayField);
                        Ext.resumeLayouts(true);
                    }
                }, this);
            }
        },{
            xtype: 'button',
            text: 'Save',
            scope: this,
            handler: function(btn){
                Ext.Msg.confirm('Alerta', 'Desea grabar los cambios?', function (button) {
                    if (button === 'yes') {
                        var innerItem = btn.up('panel').up('panel').getComponent(0);
                        var comboValue = innerItem.getComponent(0).getValue();
                        console.log(comboValue);
                        Ext.Ajax.request({
                            url: 'ims/threadinfoedit',
                            params: {
                                company: '<?=$this->company;?>', 
                                country: '<?=$this->country;?>', 
                                location: '<?=$this->location;?>', 
                                process: <?=$this->processId;?>, 
                                thread: <?=$this->threadId;?>,
                                field: 'owner',
                                lang: '<?=$this->lang;?>',
                                value: comboValue
                            },
                            success: function(response){
                                var status = Ext.decode(response.responseText);
                                if(status.success){
                                    Ext.suspendLayouts();
                                    component.up('panel').removeAll();
                                    var displayField = [{
                                        width: '100%',
                                        xtype: 'displayfield',
                                        value: status.displayvalue
                                    }];
                                    component.up('panel').add(displayField);
                                    Ext.resumeLayouts(true);
                                }else{
                                    Ext.Msg.alert('Alerta', 'No se grabaron los datos!');
                                }
                            },
                            failure: function(response){
                                console.log(response.status);
                                if(response.status === 404){
                                    Ext.Msg.alert('Servidor no disponible', 'El servidor no esta disponible en este momento <br> para procesar su solicitud');
                                }else if(response.status === 500){
                                    Ext.Msg.alert('Servidor con problemas', 'El servidor tiene un problema interno <br> por favor contactese con el personal de Sistemas');
                                }
                            }
                        },this);
                    }
                }, this);
            }
        }]
    }];
    var item = component.up('panel').items.getAt(0);
    var itemValue = Ext.String.htmlDecode(item.value);
    Ext.suspendLayouts();
    component.up('panel').removeAll();
    component.up('panel').add(items);
    Ext.resumeLayouts(true);
}

var tabpanel<?=$this->threadId; ?> = Ext.create('Ext.tab.Panel', {
    layout: 'fit',
    //autoScroll: true,
    items: [
        {
            title: 'Detalles',
            bodyPadding: 5,
            layout: {
                type: 'vbox',
                pack: 'start',
                align: 'stretch'
            },
            defaults: {
                frame: false,
                padding: 2,
                autoScroll: true
            },
            items: [{
                title: 'Misión',
                flex: 1,
                minHeight: 135,
                margin: '0 0 0 0',
                tools: [{
                    type: 'gear',
                    tooltip: 'Edit Information',
                    handler: fnChangeInformation,
                    hidden: <?php echo ($this->user_role=='Admin' OR $this->user_role=='Editor')?'false':'true'; ?>
                }],
                items: [{
                    width: '100%',
                    itemId: 'mission',
                    xtype: 'displayfield',
                    value: '<?=$this->threadData[0]->mission; ?>'
                }]
            }, {
                title: 'Dueño del proceso',
                flex: 1,
                margin: '0 0 5 0',
                tools: [{
                    type: 'gear',
                    tooltip: 'Edit Owner',
                    handler: fnChangeOwner,
                    hidden: <?php echo ($this->user_role=='Admin' OR $this->user_role=='Editor')?'false':'true'; ?>
                }],
                items: [{
                    width: '100%',
                    itemId: 'textowner',
                    xtype: 'displayfield',
                    value: '<?=$this->owner; ?>'
                }]
            }, {
                title: 'Alcance',
                flex: 1,
                minHeight: 135,
                margin: '0 0 0 0',
                tools: [{
                    type: 'gear',
                    tooltip: 'Edit Information',
                    handler: fnChangeInformation,
                    hidden: <?php echo ($this->user_role=='Admin' OR $this->user_role=='Editor')?'false':'true'; ?>
                }],
                items: [{
                    width: '100%',
                    itemId: 'scope',
                    xtype: 'displayfield',
                    value: '<?=$this->threadData[0]->scope; ?>'
                }]
            },{
                layout: {
                    type: 'hbox',
                    pack: 'start',
                    align: 'stretch'
                }, 
                items: [{
                    title: 'Entradas',
                    flex: 1,
                    margin: '0 5 0 0',
                    html: 'Entradas'
                },{
                    title: 'Salidas',
                    flex: 1,
                    html: 'Salidas'
                }]
            }]
        },{
            title: 'Actividades',
            html: 'Details will be added here'
        },
        DocumentsGrid<?=$this->threadId; ?>,
        /*
        {
            title: 'Documentos Asociados',
            html: 'Listado de Documentos'
        },
        */
        HIRAGrid<?=$this->threadId; ?>,
        /*
        {
            title: 'IPER',
            html: 'IPER Will be here'
        },
        */
        IEEAGrid<?=$this->threadId; ?>,
        /*
        {
            title: 'Aspectos Ambientales',
            html: 'Hello world 2'
        },*/
        {
            title: 'Indicadores',
            html: 'Hello world 3'
        }]
});

var windowDoc = Ext.create('Ext.window.Window',{
    title: 'Document Viewer',
    closable: true
});


function showDocument(obj, id, component, icon, event, record){
    var document = Ext.create('Ext.ux.panel.PDF', {
        width    : 450,
        height   : 500,
        pageScale: 1,                                           // Initial scaling of the PDF. 1 = 100%
        src      : record.data.doc_file, // URL to the PDF - Same Domain or Server with CORS Support
    });
    windowDoc.add(document);
    windowDoc.show();
    /*
    console.log(obj);
    console.log(id);
    console.log(component);
    console.log(icon);
    console.log(event);
    console.log(record);
    */
}

Ext.getCmp('content-panel').getActiveTab().getComponent(0).getComponent(2).add(tabpanel<?=$this->threadId; ?>);
</script>

