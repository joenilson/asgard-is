<?php
/**
 * @application Asgard Information System :: asgard-is
 * @version 1.0.0 devel
 * @author Joe Nilson <joenilson@gmail.com>
 */
?>
<script>
var diagram<?=$this->panelId; ?>;

function deployCombos(comboField,comboValue){
    var combo = formDataRequest<?=$this->panelId;?>.getForm().findField(comboField);
    var store = combo.store;
    store.on("load", function(store, records, state, operation, opts) {
            combo.setValue(comboValue);
    });
}

var storeProcessList<?=$this->panelId; ?> = Ext.create('Asgard.store.ProcessMain');
var storeProcessMain<?=$this->panelId; ?> = Ext.create('Asgard.store.ProcessMain');
var storeProcessSupport<?=$this->panelId; ?> = Ext.create('Asgard.store.ProcessMain');
var storeProcessStrategic<?=$this->panelId; ?> = Ext.create('Asgard.store.ProcessMain');

var tpl = Ext.create('Ext.ux.CTemplate',
    '<tpl for=".">',
        '<div class="item" style="padding: 5px; float: left;">{button}</div>',
    '</tpl>'
);

var mainProcessTpl = Ext.create('Ext.ux.CTemplate',
    '<tpl for=".">',
        '<div class="item" style="padding: 5px; text-align: center; clear: both;">{button}</div>',
    '</tpl>'
);


var toolsProcess = [{
    type: 'plus',
    tooltip: 'Add Process',
    handler: fnTool
},{
    type: 'minus',
    tooltip: 'Remove Process',
    handler: fnTool
}];

var diagramStrategicView = Ext.create('Asgard.lib.Panels.DiagramView',{
    itemSelector: 'item',
    autoScroll: true,
    margin: 3,
    tpl: tpl,
    name: 'ims1',
    emptyText: 'No hay nada que ver',
    minHeight: '200px',
    store: storeProcessStrategic<?=$this->panelId; ?>
});

var diagramMainView = Ext.create('Asgard.lib.Panels.DiagramView',{
    itemSelector: 'item',
    autoScroll: true,
    margin: 3,
    tpl: mainProcessTpl,
    name: 'ims2',
    store: storeProcessMain<?=$this->panelId; ?>,
});


var diagramSupportView = Ext.create('Asgard.lib.Panels.DiagramView',{
    itemSelector: 'item',
    autoScroll: true,
    margin: 3,
    tpl: tpl,
    store: storeProcessSupport<?=$this->panelId; ?>,
});


var strategicProcess = Ext.create('Ext.panel.Panel',{
    title: '<?=$this->ims_strategic_process; ?>',
    name: 'ims-strategic-process',
    border: true,
    layout: 'fit',
    tools: toolsProcess,
    flex:1,
    items: [diagramStrategicView]
});

var mainProcess = Ext.create('Ext.panel.Panel',{
    title: '<?=$this->ims_main_process; ?>',
    name: 'ims-main-process',
    layout: 'fit',
    border: true,
    flex:3,
    tools: toolsProcess,
    items: [diagramMainView]
});

var supportProcess = Ext.create('Ext.panel.Panel',{
    title: '<?=$this->ims_support_process; ?>',
    name: 'ims-support-process',
    layout: 'fit',
    flex:1,
    border: true,
    tools: toolsProcess,
    items: [diagramSupportView]
});

var RequestButton = Ext.create('Ext.Button',{
    iconMask: true, 
    width: 120, 
    height: 26, 
    cls: 'rotate270', 
    text: 'Cliente',
    type: 'request',
    path: 'ims/requirements/10-32',
    alternateText: 'Requisitos',
    handler: fnButton
});

var SatisfactionButton = Ext.create('Ext.Button',{
    iconMask: true, 
    width: 120, 
    height: 26, 
    cls: 'rotate270', 
    text: 'Cliente',
    type: 'satisfaction',
    path: 'ims/objdocument/csi/10-29',
    alternateText: '<?=($this->lang=='es')?'Indice de Satisfacción al Cliente':'Pontuação do Satisfação do Cliente';?>',
    handler: fnButton
});

<? $this->ims_request = 'Requisitos'; ?>
var requestPanel = Ext.create('Ext.panel.Panel',{
    name: 'ims-request',
    border: true,
    flex:1,
    layout: {
        type: 'hbox',
        align: 'middle',
        pack: 'center'
    },
    items: [
        {
            xtype: 'text',
            text: '<?=$this->ims_request; ?>',
            degrees: 270
        },
        RequestButton
    ]
});

<? $this->ims_satisfaction = 'Satisfacción'; ?>
var satisfactionPanel = Ext.create('Ext.panel.Panel',{
    name: 'ims-satisfaction',
    border: true,
    flex:1,
    layout: {
        type: 'hbox',
        align: 'middle',
        pack: 'center'
    },
    items: [
        {
            xtype: 'text',
            text: '<?=$this->ims_satisfaction; ?>',
            degrees: 270
        },
        SatisfactionButton
    ]
});

/*
* Form Panel to attach
*/
var formDataRequest<?=$this->panelId; ?> = Ext.create('Asgard.lib.forms.comboCCL');

var processList<?=$this->panelId; ?> = Ext.create('Asgard.lib.grid.list', {
    selType: 'checkboxmodel',
    store: storeProcessList<?=$this->panelId; ?>,
    columns: {
         plugins: [{
            ptype: 'gridautoresizer'
        }],
        items: [
            {text: 'id', flex: 0.25, dataIndex: 'id', sortable: true, filter: true },
            {text: 'description', flex: 0.75, dataIndex: 'value', sortable: true, filter: true, tdCls: 'wrapText' }
        ]
    }
});

var processWindow<?=$this->panelId; ?> = Ext.create('Asgard.lib.window.list', {
    title: 'Process List',
    items: [ processList<?=$this->panelId; ?> ]
});

var diagramViewport<?=$this->panelId; ?> = Ext.create('Ext.panel.Panel', {
    layout: {
        type: 'vbox',
        align : 'stretch',
        pack  : 'start'
    },
    items: [
        <?php echo 'formDataRequest' . $this->panelId; ?>,
        strategicProcess,
        { 
            flex: 2,
            xtype: 'container',
            layout: {
                type: 'hbox',
                pack: 'start',
                align: 'stretch'
            },
            items: [
                requestPanel,
                mainProcess,
                satisfactionPanel
                
            ]
        },
        supportProcess 
    ]
});


deployCombos('companiesCombo','<?=$this->companyId;?>');
deployCombos('countriesCombo','<?=$this->countryId;?>');
deployCombos('locationsCombo','<?=$this->locationId;?>');


function fnCCLProcess(button, opt, obj) {
    var values = button.up('form').getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];
    diagramStrategicView.store.removeAll();
    storeProcessStrategic<?=$this->panelId; ?>.load({params: { type: '1', assigned: 'A', company: companies, country: countries, location: locations }});
    diagramMainView.store.removeAll();
    storeProcessMain<?=$this->panelId; ?>.load({params: { type: '2', assigned: 'A', company: companies, country: countries, location: locations }});
    diagramSupportView.store.removeAll();
    storeProcessSupport<?=$this->panelId; ?>.load({params: { type: '3', assigned: 'A', company: companies, country: countries, location: locations }});
}

   
function fnButton (button, object)
{
    var paths = button.path.split('/');
    var tabsPanel = Ext.getCmp('content-panel'); 
    var itemTab = paths[0]+'-'+paths[1]+'-process';
    var tab = Ext.getCmp(itemTab);
    var loaderPath, tabTitle;
    var form = <?php echo 'formDataRequest' . $this->panelId; ?>;
    var values = form.getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];
    tabTitle = (button.type === 'button')?button.text:button.alternateText;
    loaderPath = (button.type === 'button')?'ims/process/<?=$this->module_id;?>/'+companies+'/'+countries+'/'+locations+'/'+button.path:button.path;
    if (tab) {
      tabsPanel.setActiveTab(tab);
    } else {
        tabsPanel.add({
            xtype: 'panel',
            closable: true,
            id: itemTab,
            title: tabTitle,
            AutoDestroy: true,
            layout: 'fit',
            loader: {
                url: loaderPath,
                autoLoad: true,
                scripts: true
            }
      }).show();
      tabsPanel.ownerCt.doLayout();    
    }
}

function fnSubmit (button, object)
{
    var grid = processList<?=$this->panelId; ?>;
    var sm = grid.getSelectionModel();
    var m = sm.getSelection();
    var form = <?php echo 'formDataRequest' . $this->panelId; ?>;
    var values = form.getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];

    this.selectedIds = [];
    this.parentId = "";
    Ext.each(m, function(rec) {
        this.selectedIds.push(rec.get("id"));
    }, this);
    
    var actionType = Ext.get('toolType').value;
    var processType = Ext.get('processType').value;
    
    Ext.Ajax.request({
        url: 'ims/processdiagram',
        params: {
            company: companies, 
            country: countries, 
            location: locations,
            type: actionType,
            process: processType,
            type_process: 'p',
            values: Ext.encode(this.selectedIds),
            module: 'diagram'
        },
        success: function(response){
            fnStoreReload(processType,'A',companies,countries,locations,processType);
            storeProcessList<?=$this->panelId; ?>.reload();
            processWindow<?=$this->panelId; ?>.hide();
        }
    });
    
}

function fnStoreReload(processType,asignation,companyId,countryId,locationId,processType)
{
    if(processType==='ims-strategic-process'){
        storeProcessStrategic<?=$this->panelId; ?>.load({params: { assigned: asignation, company: companyId, country: countryId, location: locationId, process: processType }});
    }else if (processType==='ims-main-process'){
        storeProcessMain<?=$this->panelId; ?>.load({params: { assigned: asignation, company: companyId, country: countryId, location: locationId, process: processType }});
    }else if (processType==='ims-support-process'){
        storeProcessSupport<?=$this->panelId; ?>.load({params: { assigned: asignation, company: companyId, country: countryId, location: locationId, process: processType }});
    }
}

function fnCancel ()
{
    processWindow<?=$this->panelId; ?>.hide();
}

function fnTool(me, e, object, tool) {
    var panel = tool.up('panel');

    Ext.get('toolType').value=tool.type;
    Ext.get('processType').value=panel.name;
    
    var form = <?php echo 'formDataRequest' . $this->panelId; ?>;
    var values = form.getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];
    
    processList<?=$this->panelId; ?>.suspendEvents();
    if(tool.type==='minus'){
        // on windows load
        //storeProcessStrategic<?=$this->panelId; ?>.load({params: { assigned: 'A', company: companies, country: countries, location: locations }});
        if(panel.name==='ims-strategic-process'){        
            processList<?=$this->panelId; ?>.reconfigure(storeProcessStrategic<?=$this->panelId; ?>);  
        }else if (panel.name==='ims-main-process'){
            processList<?=$this->panelId; ?>.reconfigure(storeProcessMain<?=$this->panelId; ?>);
        }else if (panel.name==='ims-support-process'){
            processList<?=$this->panelId; ?>.reconfigure(storeProcessSupport<?=$this->panelId; ?>);  
        }
    }else if(tool.type==='plus'){
        storeProcessList<?=$this->panelId; ?>.load({params: { assigned: 'U', company: companies, country: countries, location: locations }});
        processList<?=$this->panelId; ?>.reconfigure(storeProcessList<?=$this->panelId; ?>);  
    }
    processList<?=$this->panelId; ?>.resumeEvents();
    if (processWindow<?=$this->panelId; ?>.isVisible()) {
        processWindow<?=$this->panelId; ?>.hide();
    } else {
        processWindow<?=$this->panelId; ?>.show();
    }
}
Ext.getCmp('content-panel').getActiveTab().add(diagramViewport<?=$this->panelId; ?>);
</script>
<input type="hidden" id="toolType">
<input type="hidden" id="processType">