<?php
/*
 * Copyright (C) 2013 Joe Nilson <joenilson@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * @application Asgard Information System :: asgard-is
 * @version 1.0.0 devel
 * @author Joe Nilson <joenilson@gmail.com>
 */
?>
<script>
function deployCombos(comboField,comboValue){
    var combo = formDataRequest<?=$this->panelId;?>.getForm().findField(comboField);
    var store = combo.store;
    store.on("load", function(store, records, state, operation, opts) {
            combo.setValue(comboValue);
    });
}    
var required = '<span style="color:red;font-weight:bold" data-qtip="Required">*</span>';

var DocsLibraryStore<?= $this->panelId; ?> = Ext.create('Asgard.store.DocsLibrary');

var innerStore = new Ext.create('Asgard.store.DocsRequest');

/*
 * Form Panel to attach
 */
var formDataRequest<?=$this->panelId; ?> = Ext.create('Asgard.lib.forms.comboCCLP');

/*
 * Grid to show the Docs Documents
 */
var DocumentsGrid<?=$this->panelId; ?> = Ext.create('Asgard.lib.grid.documents',{
    store: DocsLibraryStore<?= $this->panelId; ?>,
    petitionerEmail: '<?=$userData[0]['email'];?>',
    petitionerAlias: '<?=$userData[0]['fullname'];?>',
    typeDoc: 'DOC',
    sourceDoc: '<?=$this->source_doc;?>'
    
    //tools: toolsLibrary
});

var libraryViewport<?=$this->panelId; ?> = Ext.create('Ext.panel.Panel', {
    layout: {
        type: 'vbox',
        align : 'stretch',
        pack  : 'start'
    },
    items: [
        formDataRequest<?=$this->panelId; ?>,
        DocumentsGrid<?=$this->panelId; ?>
   ]
});

deployCombos('companiesCombo','<?=$this->companyId;?>');
deployCombos('countriesCombo','<?=$this->countryId;?>');
deployCombos('locationsCombo','<?=$this->locationId;?>');

if(windowDoc){
    windowDoc.destroy();
}
var windowDoc = Ext.create('Ext.window.Window',{
    closable: true,
    closeAction: 'destroy',
    maximizable : true,
    layout: 'fit',
    height : document.documentElement.clientHeight - 50
    //height : document.documentElement.clientHeight - 50
});

function fnCCLPProcess(button, opt, obj) {
    var values = button.up('form').getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];
    var process_id = values['processCombo'];

    DocsLibraryStore<?= $this->panelId; ?>.load({ params: { module: 'master', type: 0, company: companies, country: countries, location: locations, process: process_id}});
}

function showDocument(obj, id, component, icon, event, record){
    windowDoc.removeAll();
    windowDoc.setTitle(record.data.doc_desc);
    var documentFile = Ext.create('Ext.ux.panel.PDF', {
        flex: 1,
        //layout: 'border',
        //width: '100%',
        width    : document.documentElement.clientWidth - 400,
        height   : document.documentElement.clientHeight - 50,
        pageScale: 1,                                           // Initial scaling of the PDF. 1 = 100%
        src      : record.data.doc_file, // URL to the PDF - Same Domain or Server with CORS Support
        loadingMessage: 'Cargando Documento'
    });
    //windowDoc.alignTo(Ext.getBody(), "tr-tr", [-10, 10]);
    windowDoc.add(documentFile);
    windowDoc.show();
}

function showRequest(obj, id, component, icon, event, record){
    windowDoc.removeAll();
    windowDoc.setTitle('Change Request');
    
    var formRequest = new Ext.create('Asgard.lib.forms.docsChangeRequest',{
        flex: 1,
        baseParams: { doc_id: record.data.doc_id },
        petitionerFieldValue: '<?=$this->userData[0]['alias']; ?>',
        emailFieldValue: '<?=$this->userData[0]['email']; ?>'
    });
    
    windowDoc.add(formRequest);
    windowDoc.show();

}

 var tpl = new Ext.XTemplate(
        'File processed on the server.{result}<br />',
        'Name: {fileName}<br />',
        'Size: {fileSize:fileSize}'
    );

function fnSubmit (button, object)
{   
    var formCCL = formDataRequest<?=$this->panelId; ?>;
    var values = formCCL.getForm().getValues();
    var companies = values['companiesCombo'];
    var countries = values['countriesCombo'];
    var locations = values['locationsCombo'];

//    console.log(button);
//    console.log(object);
    var form = button.up('panel');
    if(form.getForm().isValid()){
        var processId = form.getForm().findField('doc_process').getValue();
        //console.log(processId);
        form.submit({
            params: {
                company: companies, 
                country: countries, 
                location: locations,
                source_doc: '<?=$this->source_doc;?>'
            },
            waitMsg: 'Uploading your document...',
            success: function(fp, o) {
                //console.log(fp);
                //console.log(o);
                Ext.Msg.alert('Success', tpl.apply(o.result));
                win = button.up('panel');
                win.getForm().reset();
                windowDoc.hide();
                if(button.name==='add'){
                    DocumentsGrid<?=$this->panelId; ?>.suspendEvents();
                    DocsLibraryStore<?= $this->panelId; ?>.load({ params: { module: 'master', type: 0, company: companies, country: countries, location: locations, process: processId }});
                    DocumentsGrid<?=$this->panelId; ?>.reconfigure(DocsLibraryStore<?= $this->panelId; ?>);
                    DocumentsGrid<?=$this->panelId; ?>.resumeEvents();
                }
            },
            failure: function(fp, o){
                //console.log(fp);
                //console.log(o);
                Ext.Msg.alert('Failure', o.result.message);
            }
        });
        
    }
}
    Ext.getCmp('content-panel').getActiveTab().add(libraryViewport<?= $this->panelId; ?>);

</script>